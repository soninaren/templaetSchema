{
    "author": "Katy Shimizu",
    "name": "Timer Trigger",    // what is this? The name of the trigger?
    "description": "$TimerTrigger_description", // see resx file
    "programmingModel": "v2",
    "language": "python",
    "jobs": [
        {
            "name": "Create New Project with Timer Function",   // human readable description (not display text)
            "input": {
                    "userCommand": "createNewApp",
                    "assignTo": "$(APP_FILENAME)"
                    // should inputs be a collection?
                    // app name always function_app.py?
            },
            "actions": [
                "getScheduleValue",
                "getFunctionName",
                "readFileContent_FunctionBody",
                "replaceText_FunctionBody",
                "readFileContent_FunctionApp",
                "replaceText_FunctionApp",
                "writeFile_FunctionApp",
                "showMarkdownPreview"
            ]
        },
        {
            "name": "Append Timer Function to File",   // human readable description (not display text)
            "input": [
                {
                    "userCommand": "appendToFile",
                    "assignTo": "$(SELECTED_FILENAME)"
                    // ex. in VS Code this could be app.py or the selected file
                }
            ],
            "actions": [
                "getScheduleValue",
                "getFunctionNameAction",
                "readFileContent_FunctionBody",
                "replaceText_FunctionBody",
                "readFileContent_SelectedFile",
                "appendFileContent_FunctionApp",
                "showMarkdownPreview"
            ]
        }
    ],
    "actions": [
        { // get binding setting - stores in $(SCHEDULE_INPUT)
            "name": "getScheduleValue",
            "type": "UserInput",
            "assignTo": "$(SCHEDULE_INPUT)",
            "paramId": "timerTrigger-schedule",  // convention: <type>-<setting.name> (see bindings.json)
            "defaultValue": "0 5/* * * * *"
        },
        { // get function name - stores in $(FUNCTION_NAME_INPUT)
            "name": "getFunctionName",
            "type": "UserInput",
            "assignTo": "$(FUNCTION_NAME_INPUT)",
            "paramId": "trigger-functionName", // is this the same as the name setting in bindings.json,
            "defaultValue": "MyTimerFunction"
        },
        { // read content of function_body.py into $(TIMER_FUNCTION_BODY)
            "name": "readFileContent_FunctionBody",
            "type": "ReadFromFile",
            "assignTo": "$(TIMER_FUNCTION_BODY)",
            "filePath": "function_body.py"
        },
        { // replace placeholders in in function_body.py
            "name": "replaceText_FunctionBody",
            "type": "ReplaceTokensInText",
            "assignTo": "$(TIMER_FUNCTION_BODY)",
            "source": "$(TIMER_FUNCTION_BODY)"
        },
        { // read content of function_app.py into $(FUNCTION_APP)
            "name": "readFileContent_FunctionApp",
            "type": "ReadFromFile",
            "assignTo": "$(FUNCTION_APP)",
            "filePath": "function_app.py"
        },
        { // read content of selected file into $(FUNCTION_APP)
            "name": "readFileContent_SelectedFile",
            "type": "ReadFromFile",
            "assignTo": "$(FUNCTION_APP)",
            "filePath": "$(SELECTED_FILENAME)"
        },
        { // replace $(TIMER_FUNCTION_BODY) in function_app.py
            "name": "replaceText_FunctionApp",
            "type": "ReplaceTokensInText",
            "assignTo": "$(FUNCTION_APP_TRANSFORMED)",
            "source": "$(FUNCTION_APP)" // source text is text that has placeholders
        },
        {   // on create, replace previously defined placeholder values with text
            "name": "writeFile_FunctionApp",
            "type": "WriteToFile",
            "filePath": "$(APP_FILENAME)",  // relative path
            "source": "$(FUNCTION_APP_TRANSFORMED)"
        },
        {
            "name": "appendFileContent_FunctionApp",
            "type": "AppendToFile",
            "createIfNotExists" : false,    // if false, throw error
            "source": "$(FUNCTION_APP_TRANSFORMED)",
            "filePath" : "$(SELECTED_FILENAME)",
            "continueOnError" : false,
            "errorText" : "Unable to add template"
        },
        {
            "name": "showMarkdownPreview",
            "type": "ShowMarkdownPreview",
            "filePath": "http_trigger_template.md"
        }
    ]
}